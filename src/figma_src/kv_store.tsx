/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */ /* Table schema:
CREATE TABLE kv_store_c89a26e4 (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/ // View at https://supabase.com/dashboard/project/yywgrvlafwhaelidxdfd/database/tables
// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";
const client = ()=>{
  const url = Deno.env.get("SUPABASE_URL");
  const key = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
  console.log('Creating Supabase client...');
  console.log('SUPABASE_URL exists:', !!url);
  console.log('SUPABASE_SERVICE_ROLE_KEY exists:', !!key);
  if (!url || !key) {
    throw new Error('Missing required Supabase environment variables');
  }
  return createClient(url, key);
};
// Set stores a key-value pair in the database.
export const set = async (key, value)=>{
  try {
    console.log(`KV SET: ${key}`);
    const supabase = client();
    console.log('KV SET client created successfully');
    const { error } = await supabase.from("kv_store_c89a26e4").upsert({
      key,
      value
    });
    console.log('KV SET query completed, error:', error);
    if (error) {
      console.error('KV SET error details:', error);
      throw new Error(`KV Store SET Error: ${error.message}`);
    }
    console.log('KV SET completed successfully');
  } catch (err) {
    console.error('KV SET Error:', err);
    throw err;
  }
};
// Get retrieves a key-value pair from the database.
export const get = async (key)=>{
  try {
    console.log(`KV GET: ${key}`);
    const supabase = client();
    console.log('KV client created successfully');
    const { data, error } = await supabase.from("kv_store_c89a26e4").select("value").eq("key", key).maybeSingle();
    console.log('KV query completed, error:', error, 'data:', data);
    if (error) {
      console.error('KV error details:', error);
      throw new Error(`KV Store Error: ${error.message}`);
    }
    return data?.value;
  } catch (err) {
    console.error('KV GET Error:', err);
    throw err;
  }
};
// Delete deletes a key-value pair from the database.
export const del = async (key)=>{
  const supabase = client();
  const { error } = await supabase.from("kv_store_c89a26e4").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};
// Sets multiple key-value pairs in the database.
export const mset = async (keys, values)=>{
  const supabase = client();
  const { error } = await supabase.from("kv_store_c89a26e4").upsert(keys.map((k, i)=>({
      key: k,
      value: values[i]
    })));
  if (error) {
    throw new Error(error.message);
  }
};
// Gets multiple key-value pairs from the database.
export const mget = async (keys)=>{
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_c89a26e4").select("value").in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d)=>d.value) ?? [];
};
// Deletes multiple key-value pairs from the database.
export const mdel = async (keys)=>{
  const supabase = client();
  const { error } = await supabase.from("kv_store_c89a26e4").delete().in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
};
// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix)=>{
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_c89a26e4").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d)=>d.value) ?? [];
};
